const fs = require("fs");
const glob = require("glob");
const Compilation = require("webpack/lib/Compilation");
const Compiler = require("webpack/lib/Compiler");
const { RawSource } = require("webpack-sources");
const path = require("path");
("use strict");

class FVTTMacroPackWebpackPlugin {
  static defaultOptions = {
    srcFolder: "src/packs/macros",
    globFile: "*.macro.json",
    globVarFile: "<<macro>>.*.macrovar.*",
    outputFile: "packs/macro.db",
  };
  constructor(options = {}) {
    this.options = { ...FVTTMacroPackWebpackPlugin.defaultOptions, ...options };
  }
  /**
   * Register the compilation hook
   *
   * @param {Compiler} compiler
   */
  apply(compiler) {
    compiler.hooks.thisCompilation.tap(
      FVTTMacroPackWebpackPlugin.name,
      this.#compile.bind(this)
    );
  }
  /**
   * Register the asset compilation hook
   *
   * @param {Compilation} compilation
   */
  #compile(compilation) {
    compilation.hooks.processAssets.tap(
      {
        name: FVTTMacroPackWebpackPlugin.name,
        stage: Compilation.PROCESS_ASSETS_STAGE_SUMMARIZE,
      },
      this.#processAssets.bind(this, compilation)
    );
  }
  /**
   * Replace the version strings within the module.json.tmpl
   *
   * @param {Compilation} compilation
   * @param {*} assets
   */
  #processAssets(compilation, assets) {
    const macroFiles = glob.sync(
      path.join(this.options.srcFolder, this.options.globFile)
    );
    let packContent = "";
    macroFiles.forEach((file) => {
      const filename = path.basename(file);
      const macroName = filename.substring(0, filename.indexOf("."));
      const macroContent = JSON.parse(fs.readFileSync(file).toString("utf-8"));
      const macroVarGlob = path.join(
        this.options.srcFolder,
        this.options.globVarFile.replace("<<macro>>", macroName)
      );
      glob.sync(macroVarGlob).forEach((varFile) => {
        const varFileName = path.basename(varFile);
        const varName = varFileName.substring(
          macroName.length + 1,
          varFileName.substring(
            0,
            varFileName.indexOf(".", macroName.length + 2)
          ).length
        );
        macroContent[varName] = fs.readFileSync(varFile).toString("utf-8");
      });
      packContent += `${JSON.stringify(macroContent)}\r\n`;
    });

    // Adding new asset to the compilation, so it would be automatically
    // generated by the webpack in the output directory.
    compilation.emitAsset(this.options.outputFile, new RawSource(packContent));
  }
}

module.exports = FVTTMacroPackWebpackPlugin;
